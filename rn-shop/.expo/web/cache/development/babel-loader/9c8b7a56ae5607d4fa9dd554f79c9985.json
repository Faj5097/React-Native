{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport CartItem from \"../../models/cart-item\";\nimport { ADD_TO_CART } from \"../actions/cart\";\nvar initialState = {\n  items: {},\n  totalAmount: 0\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_TO_CART:\n      var addedProduct = action.product;\n      var prodPrice = addedProduct.price;\n      var prodTitle = addedProduct.title;\n      var updatedOrNewCartItem;\n\n      if (state.items[addedProduct.id]) {\n        updatedOrNewCartItem = new CartItem(state.items[addedProduct].quantity + 1, prodPrice, prodTitle, state.items[addedProduct].sum + prodPrice);\n      } else {\n        updatedOrNewCartItem = new CartItem(1, prodPrice, prodTitle, prodPrice);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: _objectSpread(_objectSpread({}, state.items), {}, _defineProperty({}, addedProduct.id, updatedOrNewCartItem)),\n        totalAmount: state.totalAmount + prodPrice\n      });\n\n    default:\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["D:/React-Native/rn-shop/store/reducers/cart.js"],"names":["CartItem","ADD_TO_CART","initialState","items","totalAmount","state","action","type","addedProduct","product","prodPrice","price","prodTitle","title","updatedOrNewCartItem","id","quantity","sum"],"mappings":";;;;;;AAAA,OAAOA,QAAP;AACA,SAASC,WAAT;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,WAAW,EAAE;AAFI,CAArB;AAKA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,WAAL;AACI,UAAMO,YAAY,GAAGF,MAAM,CAACG,OAA5B;AACA,UAAMC,SAAS,GAAGF,YAAY,CAACG,KAA/B;AACA,UAAMC,SAAS,GAAGJ,YAAY,CAACK,KAA/B;AAEA,UAAIC,oBAAJ;;AAEA,UAAIT,KAAK,CAACF,KAAN,CAAYK,YAAY,CAACO,EAAzB,CAAJ,EAAkC;AAC9BD,QAAAA,oBAAoB,GAAG,IAAId,QAAJ,CAAaK,KAAK,CAACF,KAAN,CAAYK,YAAZ,EAA0BQ,QAA1B,GAAqC,CAAlD,EACnBN,SADmB,EAEnBE,SAFmB,EAGnBP,KAAK,CAACF,KAAN,CAAYK,YAAZ,EAA0BS,GAA1B,GAAgCP,SAHb,CAAvB;AAIH,OALD,MAMK;AACDI,QAAAA,oBAAoB,GAAG,IAAId,QAAJ,CAAa,CAAb,EAAgBU,SAAhB,EAA2BE,SAA3B,EAAsCF,SAAtC,CAAvB;AACH;;AAED,6CACOL,KADP;AAEIF,QAAAA,KAAK,kCAAOE,KAAK,CAACF,KAAb,2BAAqBK,YAAY,CAACO,EAAlC,EAAuCD,oBAAvC,EAFT;AAGIV,QAAAA,WAAW,EAAEC,KAAK,CAACD,WAAN,GAAoBM;AAHrC;;AAKJ;AACI;AAxBR;;AA0BA,SAAOL,KAAP;AACH,CA5BD","sourcesContent":["import CartItem from \"../../models/cart-item\";\r\nimport { ADD_TO_CART } from \"../actions/cart\";\r\n\r\nconst initialState = {\r\n    items: {},\r\n    totalAmount: 0\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TO_CART:\r\n            const addedProduct = action.product;\r\n            const prodPrice = addedProduct.price;\r\n            const prodTitle = addedProduct.title;\r\n\r\n            let updatedOrNewCartItem;\r\n\r\n            if (state.items[addedProduct.id]) {\r\n                updatedOrNewCartItem = new CartItem(state.items[addedProduct].quantity + 1,\r\n                    prodPrice,\r\n                    prodTitle,\r\n                    state.items[addedProduct].sum + prodPrice);\r\n            }\r\n            else {\r\n                updatedOrNewCartItem = new CartItem(1, prodPrice, prodTitle, prodPrice);\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                items: { ...state.items, [addedProduct.id]: updatedOrNewCartItem },\r\n                totalAmount: state.totalAmount + prodPrice\r\n            }\r\n        default:\r\n            break;\r\n    }\r\n    return state;\r\n}"]},"metadata":{},"sourceType":"module"}